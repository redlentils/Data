{
 "mainCode": "{\n    {\n        {\n        }\n        {\n        }\n    }\n}\n",
 "signalName2Idx": {
  "one": 0,
  "main.message[0]": 2,
  "main.message[1]": 3,
  "main.message[2]": 4,
  "main.match[0]": 5,
  "main.match[1]": 6,
  "main.match[2]": 7,
  "main.matchCount": 1,
  "main.ise[0].in[0]": 16,
  "main.ise[0].in[1]": 2,
  "main.ise[0].out": 5,
  "main.ise[0].isz.in": 8,
  "main.ise[0].isz.out": 5,
  "main.ise[0].isz.inv": 9,
  "main.ise[1].in[0]": 17,
  "main.ise[1].in[1]": 3,
  "main.ise[1].out": 6,
  "main.ise[1].isz.in": 10,
  "main.ise[1].isz.out": 6,
  "main.ise[1].isz.inv": 11,
  "main.ise[2].in[0]": 18,
  "main.ise[2].in[1]": 4,
  "main.ise[2].out": 7,
  "main.ise[2].isz.in": 12,
  "main.ise[2].isz.out": 7,
  "main.ise[2].isz.inv": 13,
  "main.isz.in": 1,
  "main.isz.out": 14,
  "main.isz.inv": 15
 },
 "components": [
  {
   "name": "main",
   "params": {
    "char": "66",
    "l": "3"
   },
   "template": "Search",
   "inputSignals": 3
  },
  {
   "name": "main.ise[0]",
   "params": {},
   "template": "IsEqual",
   "inputSignals": 2
  },
  {
   "name": "main.ise[1]",
   "params": {},
   "template": "IsEqual",
   "inputSignals": 2
  },
  {
   "name": "main.ise[2]",
   "params": {},
   "template": "IsEqual",
   "inputSignals": 2
  },
  {
   "name": "main.ise[0].isz",
   "params": {},
   "template": "IsZero",
   "inputSignals": 1
  },
  {
   "name": "main.ise[1].isz",
   "params": {},
   "template": "IsZero",
   "inputSignals": 1
  },
  {
   "name": "main.ise[2].isz",
   "params": {},
   "template": "IsZero",
   "inputSignals": 1
  },
  {
   "name": "main.isz",
   "params": {},
   "template": "IsZero",
   "inputSignals": 1
  }
 ],
 "componentName2Idx": {
  "main": 0,
  "main.ise[0]": 1,
  "main.ise[1]": 2,
  "main.ise[2]": 3,
  "main.ise[0].isz": 4,
  "main.ise[1].isz": 5,
  "main.ise[2].isz": 6,
  "main.isz": 7
 },
 "signals": [
  {
   "names": [
    "one"
   ],
   "triggerComponents": []
  },
  {
   "names": [
    "main.matchCount",
    "main.isz.in"
   ],
   "triggerComponents": [
    7
   ]
  },
  {
   "names": [
    "main.message[0]",
    "main.ise[0].in[1]"
   ],
   "triggerComponents": [
    0,
    1
   ]
  },
  {
   "names": [
    "main.message[1]",
    "main.ise[1].in[1]"
   ],
   "triggerComponents": [
    0,
    2
   ]
  },
  {
   "names": [
    "main.message[2]",
    "main.ise[2].in[1]"
   ],
   "triggerComponents": [
    0,
    3
   ]
  },
  {
   "names": [
    "main.match[0]",
    "main.ise[0].out",
    "main.ise[0].isz.out"
   ],
   "triggerComponents": []
  },
  {
   "names": [
    "main.match[1]",
    "main.ise[1].out",
    "main.ise[1].isz.out"
   ],
   "triggerComponents": []
  },
  {
   "names": [
    "main.match[2]",
    "main.ise[2].out",
    "main.ise[2].isz.out"
   ],
   "triggerComponents": []
  },
  {
   "names": [
    "main.ise[0].isz.in"
   ],
   "triggerComponents": [
    4
   ]
  },
  {
   "names": [
    "main.ise[0].isz.inv"
   ],
   "triggerComponents": []
  },
  {
   "names": [
    "main.ise[1].isz.in"
   ],
   "triggerComponents": [
    5
   ]
  },
  {
   "names": [
    "main.ise[1].isz.inv"
   ],
   "triggerComponents": []
  },
  {
   "names": [
    "main.ise[2].isz.in"
   ],
   "triggerComponents": [
    6
   ]
  },
  {
   "names": [
    "main.ise[2].isz.inv"
   ],
   "triggerComponents": []
  },
  {
   "names": [
    "main.isz.out"
   ],
   "triggerComponents": []
  },
  {
   "names": [
    "main.isz.inv"
   ],
   "triggerComponents": []
  },
  {
   "names": [
    "main.ise[0].in[0]"
   ],
   "triggerComponents": [
    1
   ]
  },
  {
   "names": [
    "main.ise[1].in[0]"
   ],
   "triggerComponents": [
    2
   ]
  },
  {
   "names": [
    "main.ise[2].in[0]"
   ],
   "triggerComponents": [
    3
   ]
  }
 ],
 "constraints": [
  [
   {
    "0": "21888242871839275222246405745257275088548364400416034343698204186575808495551",
    "2": "1"
   },
   {
    "9": "1"
   },
   {
    "0": "1",
    "1": "21888242871839275222246405745257275088548364400416034343698204186575808495616",
    "6": "1",
    "7": "1"
   }
  ],
  [
   {
    "0": "21888242871839275222246405745257275088548364400416034343698204186575808495551",
    "2": "1"
   },
   {
    "1": "1",
    "6": "21888242871839275222246405745257275088548364400416034343698204186575808495616",
    "7": "21888242871839275222246405745257275088548364400416034343698204186575808495616"
   },
   {}
  ],
  [
   {
    "0": "21888242871839275222246405745257275088548364400416034343698204186575808495551",
    "3": "1"
   },
   {
    "11": "1"
   },
   {
    "0": "1",
    "6": "21888242871839275222246405745257275088548364400416034343698204186575808495616"
   }
  ],
  [
   {
    "0": "21888242871839275222246405745257275088548364400416034343698204186575808495551",
    "3": "1"
   },
   {
    "6": "1"
   },
   {}
  ],
  [
   {
    "0": "21888242871839275222246405745257275088548364400416034343698204186575808495551",
    "4": "1"
   },
   {
    "13": "1"
   },
   {
    "0": "1",
    "7": "21888242871839275222246405745257275088548364400416034343698204186575808495616"
   }
  ],
  [
   {
    "0": "21888242871839275222246405745257275088548364400416034343698204186575808495551",
    "4": "1"
   },
   {
    "7": "1"
   },
   {}
  ],
  [
   {
    "1": "1"
   },
   {
    "15": "1"
   },
   {
    "0": "1"
   }
  ]
 ],
 "templates": {
  "Num2Bits": "function(ctx) {\n    ctx.setVar(\"lc1\", [], \"0\");\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(ctx.getVar(\"i\",[])).lt(bigInt(ctx.getVar(\"n\",[]))) ? 1 : 0;(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setSignal(\"out\", [ctx.getVar(\"i\",[])], bigInt(bigInt(ctx.getVar(\"i\",[])).greater(bigInt(256)) ? 0 : bigInt(ctx.getSignal(\"in\", [])).shr(bigInt(ctx.getVar(\"i\",[]))).and(__MASK__)).and(bigInt(\"1\")).and(__MASK__));\n        ctx.assert(bigInt(ctx.getSignal(\"out\", [ctx.getVar(\"i\",[])])).mul(bigInt(bigInt(ctx.getSignal(\"out\", [ctx.getVar(\"i\",[])])).add(__P__).sub(bigInt(\"1\")).mod(__P__))).mod(__P__), \"0\");\n        ctx.setVar(\"lc1\", [], bigInt(ctx.getVar(\"lc1\",[])).add(bigInt(bigInt(ctx.getSignal(\"out\", [ctx.getVar(\"i\",[])])).mul(bigInt(bigInt(\"2\").modPow(bigInt(ctx.getVar(\"i\",[])), __P__))).mod(__P__))).mod(__P__));\n    }\n\n     }\n    ctx.assert(ctx.getVar(\"lc1\",[]), ctx.getSignal(\"in\", []));\n}\n",
  "Bits2Num": "function(ctx) {\n    ctx.setVar(\"lc1\", [], \"0\");\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(ctx.getVar(\"i\",[])).lt(bigInt(ctx.getVar(\"n\",[]))) ? 1 : 0;(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setVar(\"lc1\", [], bigInt(ctx.getVar(\"lc1\",[])).add(bigInt(bigInt(ctx.getSignal(\"in\", [ctx.getVar(\"i\",[])])).mul(bigInt(bigInt(\"2\").modPow(bigInt(ctx.getVar(\"i\",[])), __P__))).mod(__P__))).mod(__P__));\n    }\n\n     }\n    ctx.setSignal(\"out\", [], ctx.getVar(\"lc1\",[]));\n    ctx.assert(ctx.getSignal(\"out\", []), ctx.getVar(\"lc1\",[]));\n}\n",
  "BinSum": "function(ctx) {\n    ctx.setVar(\"nout\", [], ctx.callFunction(\"nbits\", [bigInt(bigInt(\"2\").modPow(bigInt(ctx.getVar(\"n\",[])), __P__)).mul(bigInt(ctx.getVar(\"ops\",[]))).mod(__P__)]));\n    ctx.setVar(\"lin\", [], \"0\");\n    ctx.setVar(\"lout\", [], \"0\");\n    for (ctx.setVar(\"k\", [], \"0\");bigInt(ctx.getVar(\"k\",[])).lt(bigInt(ctx.getVar(\"n\",[]))) ? 1 : 0;(ctx.setVar(\"k\", [], bigInt(ctx.getVar(\"k\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        for (ctx.setVar(\"j\", [], \"0\");bigInt(ctx.getVar(\"j\",[])).lt(bigInt(ctx.getVar(\"ops\",[]))) ? 1 : 0;(ctx.setVar(\"j\", [], bigInt(ctx.getVar(\"j\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n        {\n            ctx.setVar(\"lin\", [], bigInt(ctx.getVar(\"lin\",[])).add(bigInt(bigInt(ctx.getSignal(\"in\", [ctx.getVar(\"j\",[]),ctx.getVar(\"k\",[])])).mul(bigInt(bigInt(\"2\").modPow(bigInt(ctx.getVar(\"k\",[])), __P__))).mod(__P__))).mod(__P__));\n        }\n\n         }\n    }\n\n     }\n    for (ctx.setVar(\"k\", [], \"0\");bigInt(ctx.getVar(\"k\",[])).lt(bigInt(ctx.getVar(\"nout\",[]))) ? 1 : 0;(ctx.setVar(\"k\", [], bigInt(ctx.getVar(\"k\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setSignal(\"out\", [ctx.getVar(\"k\",[])], bigInt(bigInt(ctx.getVar(\"k\",[])).greater(bigInt(256)) ? 0 : bigInt(ctx.getVar(\"lin\",[])).shr(bigInt(ctx.getVar(\"k\",[]))).and(__MASK__)).and(bigInt(\"1\")).and(__MASK__));\n        ctx.assert(bigInt(ctx.getSignal(\"out\", [ctx.getVar(\"k\",[])])).mul(bigInt(bigInt(ctx.getSignal(\"out\", [ctx.getVar(\"k\",[])])).add(__P__).sub(bigInt(\"1\")).mod(__P__))).mod(__P__), \"0\");\n        ctx.setVar(\"lout\", [], bigInt(ctx.getVar(\"lout\",[])).add(bigInt(bigInt(ctx.getSignal(\"out\", [ctx.getVar(\"k\",[])])).mul(bigInt(bigInt(\"2\").modPow(bigInt(ctx.getVar(\"k\",[])), __P__))).mod(__P__))).mod(__P__));\n    }\n\n     }\n    ctx.assert(ctx.getVar(\"lin\",[]), ctx.getVar(\"lout\",[]));\n}\n",
  "IsZero": "function(ctx) {\n    ctx.setSignal(\"inv\", [], bigInt((bigInt(ctx.getSignal(\"in\", [])).eq(bigInt(\"0\")) ? 0 : 1)).neq(bigInt(0)) ? (bigInt(\"1\").mul( bigInt(ctx.getSignal(\"in\", [])).inverse(__P__) ).mod(__P__)) : (\"0\"));\n    ctx.setSignal(\"out\", [], bigInt(bigInt(__P__.sub(bigInt(ctx.getSignal(\"in\", []))).mod(__P__)).mul(bigInt(ctx.getSignal(\"inv\", []))).mod(__P__)).add(bigInt(\"1\")).mod(__P__));\n    ctx.assert(ctx.getSignal(\"out\", []), bigInt(bigInt(__P__.sub(bigInt(ctx.getSignal(\"in\", []))).mod(__P__)).mul(bigInt(ctx.getSignal(\"inv\", []))).mod(__P__)).add(bigInt(\"1\")).mod(__P__));\n    ctx.assert(bigInt(ctx.getSignal(\"in\", [])).mul(bigInt(ctx.getSignal(\"out\", []))).mod(__P__), \"0\");\n}\n",
  "IsEqual": "function(ctx) {\n    ctx.setPin(\"isz\", [], \"in\", [], bigInt(ctx.getSignal(\"in\", [\"1\"])).add(__P__).sub(bigInt(ctx.getSignal(\"in\", [\"0\"]))).mod(__P__));\n    ctx.assert(ctx.getPin(\"isz\", [], \"in\", []), bigInt(ctx.getSignal(\"in\", [\"1\"])).add(__P__).sub(bigInt(ctx.getSignal(\"in\", [\"0\"]))).mod(__P__));\n    ctx.setSignal(\"out\", [], ctx.getPin(\"isz\", [], \"out\", []));\n    ctx.assert(ctx.getSignal(\"out\", []), ctx.getPin(\"isz\", [], \"out\", []));\n}\n",
  "ForceEqualIfEnabled": "function(ctx) {\n    ctx.setPin(\"isz\", [], \"in\", [], bigInt(ctx.getSignal(\"in\", [\"1\"])).add(__P__).sub(bigInt(ctx.getSignal(\"in\", [\"0\"]))).mod(__P__));\n    ctx.assert(ctx.getPin(\"isz\", [], \"in\", []), bigInt(ctx.getSignal(\"in\", [\"1\"])).add(__P__).sub(bigInt(ctx.getSignal(\"in\", [\"0\"]))).mod(__P__));\n    ctx.assert(bigInt(bigInt(\"1\").add(__P__).sub(bigInt(ctx.getPin(\"isz\", [], \"out\", []))).mod(__P__)).mul(bigInt(ctx.getSignal(\"enabled\", []))).mod(__P__), \"0\");\n}\n",
  "LessThan": "function(ctx) {\n    ctx.setPin(\"num2Bits0\", [], \"in\", [], ctx.getSignal(\"in\", [\"0\"]));\n    ctx.assert(ctx.getPin(\"num2Bits0\", [], \"in\", []), ctx.getSignal(\"in\", [\"0\"]));\n    ctx.setPin(\"num2Bits1\", [], \"in\", [], ctx.getSignal(\"in\", [\"1\"]));\n    ctx.assert(ctx.getPin(\"num2Bits1\", [], \"in\", []), ctx.getSignal(\"in\", [\"1\"]));\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(ctx.getVar(\"i\",[])).lt(bigInt(ctx.getVar(\"n\",[]))) ? 1 : 0;(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setPin(\"adder\", [], \"in\", [\"0\",ctx.getVar(\"i\",[])], ctx.getPin(\"num2Bits0\", [], \"out\", [ctx.getVar(\"i\",[])]));\n        ctx.assert(ctx.getPin(\"adder\", [], \"in\", [\"0\",ctx.getVar(\"i\",[])]), ctx.getPin(\"num2Bits0\", [], \"out\", [ctx.getVar(\"i\",[])]));\n        ctx.setPin(\"adder\", [], \"in\", [\"1\",ctx.getVar(\"i\",[])], ctx.getPin(\"num2Bits1\", [], \"out\", [ctx.getVar(\"i\",[])]));\n        ctx.assert(ctx.getPin(\"adder\", [], \"in\", [\"1\",ctx.getVar(\"i\",[])]), ctx.getPin(\"num2Bits1\", [], \"out\", [ctx.getVar(\"i\",[])]));\n    }\n\n     }\n    ctx.setSignal(\"out\", [], ctx.getPin(\"adder\", [], \"out\", [bigInt(ctx.getVar(\"n\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)]));\n    ctx.assert(ctx.getSignal(\"out\", []), ctx.getPin(\"adder\", [], \"out\", [bigInt(ctx.getVar(\"n\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)]));\n}\n",
  "Search": "function(ctx) {\n    ctx.setVar(\"mC\", [], \"0\");\n    for (ctx.setVar(\"i\", [], \"0\");bigInt(ctx.getVar(\"i\",[])).lt(bigInt(ctx.getVar(\"l\",[]))) ? 1 : 0;(ctx.setVar(\"i\", [], bigInt(ctx.getVar(\"i\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        ctx.setPin(\"ise\", [ctx.getVar(\"i\",[])], \"in\", [\"0\"], ctx.getVar(\"char\",[]));\n        ctx.assert(ctx.getPin(\"ise\", [ctx.getVar(\"i\",[])], \"in\", [\"0\"]), ctx.getVar(\"char\",[]));\n        ctx.setPin(\"ise\", [ctx.getVar(\"i\",[])], \"in\", [\"1\"], ctx.getSignal(\"message\", [ctx.getVar(\"i\",[])]));\n        ctx.assert(ctx.getPin(\"ise\", [ctx.getVar(\"i\",[])], \"in\", [\"1\"]), ctx.getSignal(\"message\", [ctx.getVar(\"i\",[])]));\n        ctx.setSignal(\"match\", [ctx.getVar(\"i\",[])], ctx.getPin(\"ise\", [ctx.getVar(\"i\",[])], \"out\", []));\n        ctx.setVar(\"mC\", [], bigInt(ctx.getVar(\"mC\",[])).add(bigInt(ctx.getSignal(\"match\", [ctx.getVar(\"i\",[])]))).mod(__P__));\n    }\n\n     }\n    ctx.setSignal(\"matchCount\", [], ctx.getVar(\"mC\",[]));\n    ctx.assert(ctx.getSignal(\"matchCount\", []), ctx.getVar(\"mC\",[]));\n    ctx.setPin(\"isz\", [], \"in\", [], ctx.getSignal(\"matchCount\", []));\n    ctx.assert(ctx.getPin(\"isz\", [], \"in\", []), ctx.getSignal(\"matchCount\", []));\n    ctx.assert(ctx.getPin(\"isz\", [], \"out\", []), \"0\");\n}\n"
 },
 "functions": {
  "nbits": {
   "params": [
    "a"
   ],
   "func": "function(ctx) {\n    ctx.setVar(\"n\", [], \"1\");\n    ctx.setVar(\"r\", [], \"0\");\n    while (bigInt(bigInt(ctx.getVar(\"n\",[])).add(__P__).sub(bigInt(\"1\")).mod(__P__)).lt(bigInt(ctx.getVar(\"a\",[]))) ? 1 : 0) {\n    {\n        (ctx.setVar(\"r\", [], bigInt(ctx.getVar(\"r\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__);\n        ctx.setVar(\"n\", [], bigInt(ctx.getVar(\"n\",[])).mul(bigInt(\"2\")).mod(__P__));\n    }\n\n    }\n    return ctx.getVar(\"r\",[]);;\n}\n"
  }
 },
 "nPrvInputs": 3,
 "nPubInputs": 0,
 "nInputs": 3,
 "nOutputs": 1,
 "nVars": 16,
 "nConstants": 3,
 "nSignals": 19
}